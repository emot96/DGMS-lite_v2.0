# Generated by Django 3.1.7 on 2021-04-04 18:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Accounts',
            fields=[
                ('account_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('account_name', models.CharField(blank=True, max_length=200, null=True)),
                ('account_email', models.CharField(blank=True, max_length=200, null=True)),
                ('account_desc', models.CharField(blank=True, max_length=200, null=True)),
                ('account_addr', models.CharField(blank=True, max_length=500, null=True)),
                ('account_type', models.CharField(blank=True, max_length=20, null=True)),
                ('account_created_at', models.DateTimeField(blank=True, null=True)),
                ('account_updated_at', models.DateTimeField(blank=True, null=True)),
                ('account_archived', models.BooleanField(blank=True, null=True)),
                ('account_archived_at', models.DateTimeField(blank=True, null=True)),
                ('plan_id', models.IntegerField(blank=True, null=True)),
                ('plan_name', models.CharField(blank=True, max_length=20, null=True)),
                ('user_email', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'accounts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('device_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('device_name', models.CharField(blank=True, max_length=200, null=True)),
                ('device_desc', models.CharField(blank=True, max_length=200, null=True)),
                ('device_type', models.CharField(blank=True, max_length=20, null=True)),
                ('account_id', models.CharField(blank=True, max_length=20, null=True)),
                ('device_rating', models.FloatField(blank=True, null=True)),
                ('device_location', models.CharField(blank=True, max_length=200, null=True)),
                ('device_status', models.CharField(blank=True, max_length=50, null=True)),
                ('device_created_at', models.DateTimeField(blank=True, null=True)),
                ('device_updated_at', models.DateTimeField(blank=True, null=True)),
                ('fuel_report_link', models.CharField(blank=True, max_length=200, null=True)),
                ('operational_report_link', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'device',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(blank=True, max_length=20, null=True)),
                ('counter', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'device_counter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceOperational',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(blank=True, max_length=20, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('fuel_level', models.FloatField(blank=True, null=True)),
                ('unit_generated_kwh', models.FloatField(blank=True, null=True)),
                ('fuel_consumed', models.FloatField(blank=True, null=True)),
                ('energy_generated_kwh', models.FloatField(blank=True, null=True)),
                ('carbon_footprint', models.FloatField(blank=True, null=True)),
                ('fuel_cost', models.FloatField(blank=True, null=True)),
                ('per_unit_cost', models.FloatField(blank=True, null=True)),
                ('run_hours', models.FloatField(blank=True, null=True)),
                ('maximum_demand_load', models.FloatField(blank=True, null=True)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'device_operational',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DevicesInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_header', models.CharField(blank=True, max_length=20, null=True)),
                ('device_id', models.CharField(blank=True, max_length=20, null=True)),
                ('device_time', models.DateTimeField()),
                ('gateway_device_battery', models.FloatField(blank=True, null=True)),
                ('room_temperature', models.FloatField(blank=True, null=True)),
                ('dg_battery_voltage', models.FloatField(blank=True, null=True)),
                ('gateway_power_status', models.IntegerField(blank=True, null=True)),
                ('gsm_signal', models.IntegerField(blank=True, null=True)),
                ('energy_output_kw_total', models.FloatField(blank=True, null=True)),
                ('kva_r_phase', models.FloatField(blank=True, null=True)),
                ('kva_y_phase', models.FloatField(blank=True, null=True)),
                ('kva_b_phase', models.FloatField(blank=True, null=True)),
                ('power_factor', models.FloatField(blank=True, null=True)),
                ('energy_output_kva', models.FloatField(blank=True, null=True)),
                ('vll_average', models.FloatField(blank=True, null=True)),
                ('vry_phase_voltage', models.FloatField(blank=True, null=True)),
                ('vyb_phase_voltage', models.FloatField(blank=True, null=True)),
                ('vbr_phase_voltage', models.FloatField(blank=True, null=True)),
                ('vln_average', models.FloatField(blank=True, null=True)),
                ('vr_phase_voltage', models.FloatField(blank=True, null=True)),
                ('vy_phase_voltage', models.FloatField(blank=True, null=True)),
                ('vb_phase_voltage', models.FloatField(blank=True, null=True)),
                ('current_average', models.FloatField(blank=True, null=True)),
                ('current_r_phase', models.FloatField(blank=True, null=True)),
                ('current_y_phase', models.FloatField(blank=True, null=True)),
                ('current_b_phase', models.FloatField(blank=True, null=True)),
                ('frequency', models.FloatField(blank=True, null=True)),
                ('unit_generated_kwh', models.FloatField(blank=True, null=True)),
                ('rpm', models.FloatField(blank=True, null=True)),
                ('dg_runtime_seconds', models.IntegerField(blank=True, null=True)),
                ('fuel_level_percentage', models.IntegerField(blank=True, null=True)),
                ('fuel_level_litre', models.IntegerField(blank=True, null=True)),
                ('fuel_level_volt', models.IntegerField(blank=True, null=True)),
                ('fuel_level_mm', models.IntegerField(blank=True, null=True)),
                ('rpm_ctrl', models.IntegerField(blank=True, null=True)),
                ('dg_counter_ctrl', models.IntegerField(blank=True, null=True)),
                ('runtime_second_ctrl', models.IntegerField(blank=True, null=True)),
                ('device_status', models.CharField(blank=True, max_length=10, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'devices_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FuelFilledReport',
            fields=[
                ('device_time', models.DateTimeField(primary_key=True, serialize=False)),
                ('device_id', models.CharField(blank=True, max_length=20, null=True)),
                ('fuel_level', models.IntegerField(blank=True, null=True)),
                ('fuel_added', models.IntegerField(blank=True, null=True)),
                ('fuel_consumed', models.IntegerField(blank=True, null=True)),
                ('new_fuel_level', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fuel_filled_report',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OperationalPerformanceReport',
            fields=[
                ('account_name', models.CharField(blank=True, max_length=200, null=True)),
                ('device_id', models.CharField(blank=True, max_length=20, null=True)),
                ('start_time', models.DateTimeField(primary_key=True, serialize=False)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('fuel_level', models.FloatField(blank=True, null=True)),
                ('unit_generated_kwh', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('fuel_consumed', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('energy_generated_kwh', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('carbon_footprint', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('fuel_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('per_unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('run_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('maximum_demand_load', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('efficiency', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('device_location', models.CharField(blank=True, max_length=200, null=True)),
                ('device_rating', models.FloatField(blank=True, null=True)),
                ('device_status', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'operational_performance_report',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_customer', models.BooleanField(default=False)),
                ('is_manager', models.BooleanField(default=False)),
                ('is_user', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('Customer_Name', models.CharField(max_length=50)),
                ('Customer_ID', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('Email_ID', models.EmailField(max_length=50)),
                ('Country', models.CharField(max_length=30)),
                ('State', models.CharField(max_length=30)),
                ('City', models.CharField(max_length=30)),
                ('Pincode', models.BigIntegerField()),
                ('Address', models.CharField(blank=True, max_length=200)),
                ('User', models.OneToOneField(max_length=50, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('Manager_Name', models.CharField(max_length=50)),
                ('Manager_Email_ID', models.EmailField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('Mobile_No', models.CharField(max_length=50)),
                ('Contact_No', models.CharField(blank=True, max_length=50)),
                ('Customer_Name', models.ForeignKey(max_length=50, on_delete=django.db.models.deletion.CASCADE, to='login.customer')),
                ('User', models.OneToOneField(max_length=50, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('Location', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('Energy_Price', models.CharField(max_length=50)),
                ('Diesel_Price', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SetAlert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('KVA_Rating', models.BigIntegerField(choices=[('15', '15'), ('20', '20'), ('25', '25'), ('30', '30'), ('35', '35'), ('40', '40'), ('45', '45'), ('50', '50'), ('62.5', '62.5'), ('75', '75'), ('82.5', '82.5'), ('100', '100'), ('125', '125'), ('140', '140'), ('160', '160'), ('180', '180'), ('200', '200'), ('225', '225'), ('250', '250'), ('320', '320'), ('365', '365'), ('380', '380'), ('500', '500'), ('625', '625'), ('750', '750'), ('1000', '1000'), ('1500', '1500')], default='15')),
                ('Alert', models.CharField(choices=[('energy_output_kva', 'energy_output_kva'), ('vll_average', 'vll_average'), ('vlnaverage', 'vln_average'), ('current_r_phase', 'current_r_phase'), ('current_y_phase', 'current_y_phase'), ('current_b_phase', 'current_b_phase'), ('frequency', 'frequency'), ('rpm & rpm_ctrl', 'rpm & rpm_ctrl'), ('Fuel_level_litre', 'Fuel_level_litre'), ('dg_battery_voltage', 'dg_battery_voltage'), ('gateway_device_battery', 'gateway_device_battery'), ('gsm_signal', 'gsm_signal'), ('room_temperature', 'room_temperature')], default='energy_output_kw', max_length=50)),
                ('Less_Than', models.CharField(max_length=30)),
                ('More_Than', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='User_Detail',
            fields=[
                ('User_Name', models.CharField(max_length=50)),
                ('Contact_Person', models.CharField(max_length=50)),
                ('Email_ID', models.EmailField(max_length=50)),
                ('Contact1', models.CharField(max_length=50)),
                ('Contact2', models.CharField(blank=True, max_length=50)),
                ('Device_ID', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('Location', models.CharField(max_length=50)),
                ('Country', models.CharField(max_length=50)),
                ('State', models.CharField(max_length=30)),
                ('City', models.CharField(max_length=30)),
                ('Pincode', models.BigIntegerField()),
                ('Address', models.CharField(blank=True, max_length=200)),
                ('Customer_Name', models.ForeignKey(max_length=50, on_delete=django.db.models.deletion.CASCADE, to='login.customer')),
                ('Manager_Name', models.ForeignKey(blank=True, max_length=50, on_delete=django.db.models.deletion.CASCADE, to='login.manager')),
                ('User', models.OneToOneField(max_length=50, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Service_History',
            fields=[
                ('Device_ID', models.OneToOneField(max_length=50, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='login.user_detail')),
                ('Service_Contract', models.CharField(choices=[('AMC', 'AMC'), ('ON-CALL', 'ON-CALL'), ('NONE', 'NONE')], default='AMC', max_length=20)),
                ('Service_Provider', models.CharField(max_length=100)),
                ('Address', models.CharField(max_length=100)),
                ('Contact', models.CharField(max_length=20)),
                ('Last_Service_Date', models.DateField(max_length=50)),
                ('Activity', models.CharField(max_length=300)),
                ('Remark', models.CharField(max_length=300)),
                ('Next_Service_Date', models.CharField(max_length=50)),
                ('Customer_Name', models.ForeignKey(max_length=50, on_delete=django.db.models.deletion.CASCADE, to='login.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Sensor_Info',
            fields=[
                ('Device_ID', models.OneToOneField(max_length=50, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='login.user_detail')),
                ('Energy_Meter_Make_Info', models.CharField(max_length=50)),
                ('Energy_Meter_Model_No', models.CharField(max_length=50)),
                ('Energy_Meter_S_No', models.CharField(max_length=50)),
                ('Current_Transformer_Make_Info', models.CharField(max_length=50)),
                ('Current_Transformer_Model_No', models.CharField(max_length=50)),
                ('Current_Transformer_S_No', models.CharField(max_length=50)),
                ('Current_Transformer_CT_Ratio', models.CharField(max_length=50)),
                ('Fuel_Sensor_Make_Info', models.CharField(max_length=50)),
                ('Fuel_Sensor_Model_No', models.CharField(max_length=50)),
                ('Fuel_SensorS_No', models.CharField(max_length=50)),
                ('Fuel_Sensor_Length', models.CharField(max_length=50)),
                ('Customer_Name', models.ForeignKey(max_length=50, on_delete=django.db.models.deletion.CASCADE, to='login.customer')),
            ],
        ),
        migrations.CreateModel(
            name='DGMS_Device_Info',
            fields=[
                ('Device_ID', models.OneToOneField(max_length=50, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='login.user_detail')),
                ('Version', models.CharField(max_length=50)),
                ('Device_Serial_No', models.CharField(max_length=50)),
                ('Sim_Card', models.CharField(max_length=50)),
                ('IMEI_No', models.CharField(max_length=100)),
                ('Other', models.CharField(max_length=200)),
                ('Other_Info', models.CharField(max_length=500)),
                ('Customer_Name', models.ForeignKey(max_length=50, on_delete=django.db.models.deletion.CASCADE, to='login.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Before_DGMA_INSTALLATION',
            fields=[
                ('Device_ID', models.OneToOneField(max_length=50, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='login.user_detail')),
                ('Previous_Run_Hour', models.CharField(max_length=50)),
                ('Previous_Fuel_Consumed', models.CharField(max_length=50)),
                ('Run_Count', models.CharField(max_length=50)),
                ('Units_Generated', models.CharField(max_length=50)),
                ('Customer_Name', models.ForeignKey(max_length=50, on_delete=django.db.models.deletion.CASCADE, to='login.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('Device_ID', models.OneToOneField(max_length=50, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='login.user_detail')),
                ('Asset_Name', models.CharField(max_length=50)),
                ('Location', models.CharField(max_length=50)),
                ('Address', models.CharField(blank=True, max_length=200)),
                ('Asset_Photo', models.ImageField(upload_to='pics')),
                ('Diesel_Tank_Size', models.BigIntegerField()),
                ('Rating_In_KVA', models.CharField(max_length=50)),
                ('OEM', models.CharField(max_length=50)),
                ('Seller_Name', models.CharField(max_length=50)),
                ('Warranty_Start_Date', models.DateField()),
                ('Warranty_End_Date', models.DateField()),
                ('Warranty_Period', models.CharField(max_length=50)),
                ('Warranty_Status', models.CharField(choices=[('YES', 'YES'), ('NO', 'NO')], default='YES', max_length=20)),
                ('Date_Of_Installation', models.DateField()),
                ('Commissioning_Date', models.DateField()),
                ('Operations', models.CharField(choices=[('MANUAL', 'MANUAL'), ('AUTO', 'AUTO')], default='MANUAL', max_length=20)),
                ('Engine_Make', models.CharField(max_length=50)),
                ('Engine_Model_No', models.CharField(max_length=50)),
                ('Engine_S_NO', models.CharField(max_length=50)),
                ('Engine_Other_Info', models.CharField(max_length=500)),
                ('Alternator_Make', models.CharField(max_length=50)),
                ('Alternator_Model_No', models.CharField(max_length=50)),
                ('Alternator_S_NO', models.CharField(max_length=50)),
                ('Alternator_Other_Info', models.CharField(max_length=500)),
                ('Battery_Make', models.CharField(max_length=50)),
                ('Battery_Model_No', models.CharField(max_length=50)),
                ('Battery_S_NO', models.CharField(max_length=50)),
                ('Battery_Other_Info', models.CharField(max_length=500)),
                ('Battery_Charger_Make', models.CharField(max_length=50)),
                ('Battery_Charger_Model_No', models.CharField(max_length=50)),
                ('Battery_Charger_S_NO', models.CharField(max_length=50)),
                ('Battery_Charger_Other_Info', models.CharField(max_length=500)),
                ('Customer_Name', models.ForeignKey(max_length=50, on_delete=django.db.models.deletion.CASCADE, to='login.customer')),
            ],
        ),
    ]
